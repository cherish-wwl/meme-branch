<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.meme.im.dao.ImFriendMapper" >
  <resultMap id="BaseResultMap" type="com.meme.im.pojo.ImFriend" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="groupid" property="groupid" jdbcType="BIGINT" />
    <result column="friendid" property="friendid" jdbcType="BIGINT" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="addtime" property="addtime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, groupid, friendid, state, addtime
  </sql>
  <select id="selectFriends" resultType="java.util.HashMap" parameterType="java.lang.Long">
  	SELECT mem.*, mem.nickname AS username,
  		mem.memberid AS id,friend.groupid AS groupid,
  		grup.groupname,friend.id AS fid
  	FROM meme_im_friend friend
	INNER JOIN meme_member mem ON mem.memberid=friend.friendid
	INNER JOIN meme_im_friend_group grup ON grup.memberid=mem.memberid
	WHERE groupid IN(SELECT id FROM meme_im_friend_group WHERE memberid=#{memberid})
  </select>
  <select id="selectFriend" resultType="java.util.HashMap">
  	SELECT mem.*, mem.nickname AS username,
  		mem.memberid AS id,friend.groupid AS groupid,
  		grup.groupname,friend.id as fid
  	FROM meme_im_friend friend
	INNER JOIN meme_member mem ON mem.memberid=friend.friendid
	INNER JOIN meme_im_friend_group grup ON grup.memberid=mem.memberid
	WHERE groupid IN(SELECT id FROM meme_im_friend_group WHERE memberid=#{memberid}) AND friend.friendid=#{friendid}
  </select>
  <select id="selectStrangersByPagination" resultType="java.util.HashMap" parameterType="com.meme.core.form.Form">
  	SELECT member.* FROM meme_member member WHERE 
  	member.mtype != -1 
	AND member.state != 0 
	AND 
	member.memberid NOT IN (
		SELECT friendid FROM meme_im_friend WHERE groupid IN(SELECT id FROM meme_im_friend_group WHERE memberid=#{primarykey})
	) AND member.memberid != #{primarykey}
	<if test="searchKey != null and searchKey != ''">
	AND (
		member.nickname LIKE CONCAT('%', #{searchKey},'%')
		or member.email LIKE CONCAT('%', #{searchKey},'%')
		or member.cellphone LIKE CONCAT('%', #{searchKey},'%')
		)
	</if>
	<if test="sort != null and sort != ''">
  		order by ${sort} ${order}
  	</if>
  	limit #{offset},#{limit}
  </select>
  <select id="countStrangers" resultType="java.lang.Integer" parameterType="com.meme.core.form.Form">
  	SELECT count(*) FROM meme_member member
	WHERE 
	member.mtype != -1 
	AND member.state != 0 
	AND 
	member.memberid NOT IN (
		SELECT friendid FROM meme_im_friend WHERE groupid IN(SELECT id FROM meme_im_friend_group WHERE memberid=#{primarykey})
	) AND member.memberid != #{primarykey}
	<if test="searchKey != null and searchKey != ''">
	AND (
		member.nickname LIKE CONCAT('%', #{searchKey},'%')
		or member.email LIKE CONCAT('%', #{searchKey},'%')
		or member.cellphone LIKE CONCAT('%', #{searchKey},'%')
		)
	</if>
  </select>
  <delete id="delFriend">
  	DELETE FROM meme_im_friend
	WHERE groupid IN(SELECT id FROM meme_im_friend_group WHERE memberid=#{mymemberid}) AND friendid = #{friendid}
  </delete>
  
  
  
  
  
  
  
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from meme_im_friend
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from meme_im_friend
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.meme.im.pojo.ImFriend" >
    insert into meme_im_friend (id, groupid, friendid, 
      state, addtime)
    values (#{id,jdbcType=BIGINT}, #{groupid,jdbcType=BIGINT}, #{friendid,jdbcType=BIGINT}, 
      #{state,jdbcType=INTEGER}, #{addtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.meme.im.pojo.ImFriend" >
    insert into meme_im_friend
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="groupid != null" >
        groupid,
      </if>
      <if test="friendid != null" >
        friendid,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="addtime != null" >
        addtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="groupid != null" >
        #{groupid,jdbcType=BIGINT},
      </if>
      <if test="friendid != null" >
        #{friendid,jdbcType=BIGINT},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="addtime != null" >
        #{addtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.meme.im.pojo.ImFriend" >
    update meme_im_friend
    <set >
      <if test="groupid != null" >
        groupid = #{groupid,jdbcType=BIGINT},
      </if>
      <if test="friendid != null" >
        friendid = #{friendid,jdbcType=BIGINT},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="addtime != null" >
        addtime = #{addtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.meme.im.pojo.ImFriend" >
    update meme_im_friend
    set groupid = #{groupid,jdbcType=BIGINT},
      friendid = #{friendid,jdbcType=BIGINT},
      state = #{state,jdbcType=INTEGER},
      addtime = #{addtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>